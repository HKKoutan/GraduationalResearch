3.9.2(alpha)
-CheckMartixのreadmatrix()、GenerationMatrixEncodingのGTpos1_init()をそれぞれのコンストラクタに統合
-Generation_Matrix_EncodingのGTpos1_init()のHbをvectorとbitsetに置き換え(stack overflow対策)
-systematic_encodeをsystematic_parityに改名
-大きさが情報長と符号長にしか依存しないvectorをarrayとbitsetに置き換え

3.9.1(alpha)
-codeLDPC.cppを削除
-randombits.cppの内容をrandombits.hppに移動、randombits.cppを削除
-randombitsのテンプレートに長さを渡すように
-AWGN.cppの内容をAWGN.hppに移動、AWGN.cppを削除
-AWGNのテンプレートに浮動小数点型と長さを渡すように
-rangetools.hppを削除
-timekeep.cppの内容をtimekeep.hppに移動、timekeep.cppを削除
-Generation_Matrix_EncodingのGTpos1_init()のHbをarrayとbitsetに置き換え

3.9.0(alpha)
-rowpudateのsignをsignmaskを最後に一度だけ適用するように変更
-LDPCをテンプレート化、情報長と符号長をテンプレートに渡すように変更
-CheckMatrixの-size()をconstexpr化
--codeLDPC.cppの内容をcodeLDPC.hppに移動
--LDPCbase.cppの内容の大部分をLDPCbase.hppに移動

3.8.5(beta)
-BCJR_IDECを反射壁に変更（未完了）
-func_gallagerのoperator()を改修
--符号を保持するように変更
--min,max命令を使うように変更
-SumProduct_Decodingのrowupdateの最初のfg()を最初にまとめてやるように変更

3.8.4(beta)
-LDPCIDECを組織符号ではない状態で通信路を通すように変更
-LVR_to_VをLVR_to_Pr0に改名、計算式をより簡単なものに修正
-BCJR_IDECのiterateの出力が尤度比ではなく事後確率比になっていたのを修正
-MPDのPr0に渡す値を事後確率から尤度比に修正
-func_Gallagerの計算式を簡単化

3.8.3(beta)
-LDPC_DecodeのLLR_apply(),rowpudate(),colupdate(),check()をiterate()に統合
-mainmidsの集計用配列をvectorからarrayに変更、indel_rateをconstexprに　rangetoolsを置き換え
-ldpcのforのsize_t型のループ変数をautoではなく明示的に宣言するように変更
-Marker_EncodingのLVR_to_Vに値域制限を追加

3.8.2(beta)
-rowupdate()の符号の扱いを変更
--rowupdate()のsignprodを整数型にして、符号をビット演算で取り出すように変更
--alphaに値をセットするときも、三項演算子ではなくビット演算で符号を適用するように変更
//SumProductはほとんど変わらないが、MinSumは大幅に高速化→SumProductはfunc_gallagerに律速されている？
-alphaTbetaTを、行と列を交換してalphabetaに置き換え
--LLRapply()とcolupdate()をベクトル化
-ldpcのrangetoolsを置き換え、rangetoolsのincludeを削除
-mainawgnの集計用配列をvectorからarrayに変更、noise_factorをconstexprに

3.8.1(beta)
-func_gallagerのoperator()以外のメンバ関数・変数をstatic指定。呼び出し側でstatic指定する必要がなくなった。
-LDPC_Decodingのメンバ変数を調整
--alphabetapとalphaTpbetaTを、要素をpairにしていたのを行vectorをpairにするように変更
--alphabetapとalphaTpbetaTを、alphapbetapとalphaTbetaTに再構成　行ごとにアクセスするときに両方ともポインタを介するように
//rowupdate()はfunc_gallager内でランダムアクセスが必要なためベクトル化困難→colupdate()をベクトル化
-func_gallagerの最小値を0に変更
//util::zipを用いると、コンパイラの自動ベクトル化の検知対象から外れる
//util::zipよりインデックスループの方が速い→x64ではオペランドのメモリアドレスにbase+index*scaleを指定できるから　[]を複数使うとたぶん遅い

3.8.0(beta)
-C++標準をC++20に変更
-rangetoolsのconst_iteratorを実装
-alphaとbetap、alphaTpとbetaTをpairを用いてそれぞれ一つのvectorに統合
//std::execution::unseqはこの程度の要素数では逆効果？
//現状のコードではAVX2指定しても適応されない　比較演算と条件分岐はAVXにしても速くならない？ マスクレジスタ？
//func_Gallagerのoperator()を、constexprをreturnするのではなくvaluesの両端をreturnするように変更→遅い　条件分岐で定数をreturnするのが意外と速い

3.7.3(beta)
-func_Gallagerのoperator()内にstd::fabsを移動
-SumProduct_Decodingのrowupdate()内のprodsignとsumをpair signabsに統合
-LDPC_Decodingのcolupdate()を、LLRのみ引数に取ってLEVRを返すように変更
-LDPC_DecodingにLLRapply()を追加　rowupdate()の前に実行する
--colupdate()ではbetaにLLRを足さずにLLRapply()で足すように変更
--decode_init()の引数を削除、betaを0で初期化するように変更

3.7.2(beta)
-util::reverseをutil::enumerateにネストできるように型を追加　未使用
-LDPCbase.cppのGTpos1_init()を簡潔に書き直し　列交換のバグを修正
//vector<bool>の要素を交換するときに一時変数をautoで宣言すると参照になってしまって上書きされてしまう　必ずboolと明示的に宣言する

3.7.1(beta)
-Marker_Encoding::extract()にvector<double>のオーバーロードを追加
-Marker::decode()のestimateとextractの順番を入れ替え
-cmakeのサブディレクトリldpcidecを追加
--codeLDPCIDEC.hpp/cppを追加
---class Marker_LDPC_SPDを追加
-mainlids.cppを追加
//issue: LDPCがH.txt以外の検査行列でうまく復号できない

3.7.0(beta)
-Marker_IDECのBCJRアルゴリズムと関係しない部分をMarker_Encodingとして分離
-Marker_IDECをBCJR_IDECに改名
-Marker_IDECのforward,backward,integrateをiterationに統合

3.6.4(beta)
-LDPC_Decode::check()をvector<bool>ではなくvector<double>を直接受け取るように変更
-LDPC_Decode::estimation()をvector<bool>を返すように変更　復号の最後に一度だけ実行するように
-CheckMatrixのファイル読み込みの文字列数字変換をstringstreamからfrom_charsに置き換え

3.6.3(beta)
-LDPCbase.cppの範囲for文で使用するローカル変数の命名規則を見直し
-LDPCbase.cppのメンバ関数の一部をstatic指定
-LDPCbase.cppのメンバ変数のconst指定を見直し
-IDEC->IDECbase
-IDECbaseにclass Markerを追加 marker符号の諸元を一元管理できるように
-util::enumerateをconst_iteratorを扱うように変更、util::zipにダミーのconstメンバ型を追加

3.6.2(beta)
-可読性を鑑みてfor_eachとtransformとaccumulateを範囲forに差し戻し
-util::enumerateにutil::zipをネストできるように改修

3.6.1(beta)
-LDPC_Decodingの繰り返し部分のfor_eachとtransformをpar_unseq指定
//対象の関数が小さい場合、par_unseq指定すると却って遅くなる
//CPUのみ使用する場合、par_unseq指定するより手動で大まかにマルチスレッド化した方が速い

3.6.0(beta)
-alphabeta, alphabetaTpをalpha, betap, alphaTp, betaTに再構成
-LDPC_Decoding内のvectorを扱うループの大部分をfor_eachとtransformとaccumulateに置き換え

3.5.2(beta)
-noexcept指定を拡充

3.5.1(beta)
-zipにreverseをネストしなくても良いようにGTpos1_initを改修

3.5.0(alpha)
-main/rangetools.hppを作成 中身のtemplate classは範囲for文のfor-range-initializerでコンテナをラップして使用 stlコンテナに対応
--util::zip 複数のコンテナを一度に処理できる
--util::enumerate コンテナの内容と一緒にインデックスを取得できる
--util::reverse 通常のイテレータの代わりに逆イテレータを使う
-ldpcのコンテナを扱うfor文のほとんどをrangetoolsを使用して範囲for文に置き換え
//issue: zipにreverseをネストして使うとdebugは動くけどreleaseで止まる

3.4.3(beta)
-mainawgnのstringをchar*に置き換え
-mainawgnの内部をitr回しに置き換え
-AWGNのコンストラクタをsigmaではなくsigmaの2乗を受け取るように変更

3.4.2(beta)
-class Generation_Matrix_EncodingのGTpos1_init()の内部をitr回しに置き換え　処理時間にはあまり影響なし

3.4.1(beta)
pos1形式のまま掃き出し操作を行うと遅い（4乗オーダー？）
bool形式は3乗オーダーで済む
-class ATM_Encodingを削除
-LDPCmatrixmanipulationをLDPCbaseに統合
-class Generation_Matrix_EncodingのGTpos1_init()を改修
--行列を上下左右反転して右側を掃き出すように変更

3.4.0(alpha)
宣言と定義のファイルが分かれている関数は戻り値の型をautoにすべきではない
-LDPC関係のclassを整理
--LDPCのEncodingとDecodingに仮想クラスを導入[class I_LDPC_Encoding, class I_LDPC_Decoding]
---decodeに必要な関数を全てクラス内に移動
---スレッドごとにclass ~Decodingを生成するように変更 現状main関数で特殊な操作をする必要あり
--新たに検査行列のclass CheckMatrixを作成
---class ~Encodingとclass ~Decodingはclass CheckMatrix(のshared_ptr)を受け取る

3.3.1(beta)
-union floatuint_tを廃止
--reinterpret_castなどに置き換え
-値のcastをstatic_castに置き換え
-vector<bool>を扱う範囲for文の非const参照を右辺値参照に置き換え

3.3.0(beta)
-DNASを復元
--VLRLLとntequalizerを統合、codeDNASに改称
--maindnec,maindnpb,maindpb1,maindpb2,maindpb4を修正

3.2.2(beta)
func_Gallagerのvaluesはarrayにするとスタックオーバーフローを起こす
std::signbit(x)より(x<0.0)の方が若干速い
std::fabs()を三項演算子で置き換えると遅い
-std::signbit(x)を(x<0.0)に置き換え
-func_Gallagerのoperator()をinline化

3.2.1(beta)
-LDPCfileaccessをboolではなく例外で処理するように変更
-MinSum_Decodingの処理順を変更
-randombitsでクラス内に長さを保持しないように変更
-定数を設定するだけのコンストラクタにnoexceptを追加
-AWGNのLLRをitr回しに変更
-LDPCfileaccessの関数を分配して不使用に

3.2.0(beta)
-ファイル構造を整理
--ライブラリを分割
--subdirectoryを作成

3.1.0(beta)
-class Markerを実装
--動作確認済み

3.0.2(alpha)
-LDPCdecodingの計算順序を変更
--colupdate()でbetaにLLRを予め足しておく
--HdataからLLRを削除

3.0.1(alpha)
-LDPCdecodingのデータ構造を変更
--LLR,alpha,betaを構造体Hdataにまとめ、それぞれあったvectorを統合
--転置ポインタvectorも統合

3.0.0(alpha)
夏課題
-protograph codeを削除
-itr回しの書き方を整理

2.2.0(alpha)
-protograph codeを追加
--class Systematic_RA12(符号化率1/2の組織RA符号)を追加

2.1.0(alpha)
-同期誤り訂正を追加
--IDEC.hpp,IDEC.cpp,IDS.hpp,IDS.cppを追加
-LDPC.hpp,LDPC.cppをcode.hpp,code.cppに改名
-LDPCdecodingに引数&LEVR(alphaの列ごとの和)を追加して調整

2.0.5(release)
-xxx_decode()のalphaとbetaをクラス変数に移動、これによりデフォルトでスレッドセーフではなくなった
-スレッドごとにalphaとbetaを生成・使用できるように変更

2.0.4(beta)
-復号のfor文を値回しからiterator回しに変更
-縦方向の走査をポインタ配列を用いて行うように変更(高速化)

2.0.3(release)
-c++のみで動作確認　python移植不具合原因特定できず

2.0.2(alpha)
-DNASをpythonに移植(fail)

2.0.1(alpha)
-Sumproduct decoding の計算法を変更、高速化

2.0.0(alpha)
-pybind11を導入, 以降はipynbで管理 main.cpp, timekeep.hpp, timekeep.cppを削除
-多くの関数の引数vectorの型をfloatに統一
-vectorの参照返しの一部を戻り値返しに変更

1.4.0(alpha)
-ファイル IDS.hpp, IDS.cpp を追加
-クラス channel::IDS を追加
-クラス code::LDPC を code::Systematic_LDPC に改名

1.3.3(release)
-CMakeLists.txtをライブラリを生成するように変更

1.3.2(release)
-code::nt_addequalizing_decode()の不具合を修正
